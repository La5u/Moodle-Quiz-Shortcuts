// ==UserScript==
// @name         Moodle Quiz Shorcuts
// @namespace    http://tampermonkey.net/
// @version      2025-02-10
// @description  Enter/Backspace for Next/Previous question, Up/Down for selecting multiple choice question
// @author       Lasu Shin
// @match        https://moodle.yerlan.top/mod/quiz/*
// @icon         https://moodle.yerlan.top/theme/image.php/boost/theme/1730285596/favicon
// @grant        none
// @downloadURL https://update.greasyfork.org/scripts/524310/Moodle%20Quiz%20Shorcuts.user.js
// @updateURL https://update.greasyfork.org/scripts/524310/Moodle%20Quiz%20Shorcuts.meta.js
// ==/UserScript==

// ENABLE DEV MODE IN CHROME/EDGE

//TODO
//add support for jk instead of up/down
//return prev btn without taking away enter functionality
const prev_btn = document.getElementById('mod_quiz-prev-nav')
const text_field = document.getElementsByClassName('form-control d-inline')[0]
const answers = document.getElementsByClassName('answer')[0]
let radios = []
let found_radio = false

if (prev_btn) {
    //remove button bec sometimes it goes back
    prev_btn.remove()
}

// if the question is a text field answer, select it
if (text_field) {
    text_field.select()
}
// if the question has multiple choices, add them to the list radios
else if (answers) {
    for (let i = 0; i < answers.children.length; i++) {
        radios.push(answers.children[i].children[0]);
    }
}

// Check if there are saved answers in localStorage
const savedAnswers = localStorage.getItem('lastReviewAnswers');
if (savedAnswers) {
    // Parse the saved answers
    const answers = JSON.parse(savedAnswers);

    // Get the current question text
    const questionElement = document.querySelector('.qtext');
    if (questionElement) {

        let questionText = questionElement.innerText;
        if (questionText.includes('Answer Question')){
            questionText = questionText.split(' ').filter((_, i) => i !== 2).join(' ')
        }

        const savedAnswer = answers[questionText];
        console.log(questionText)

        // If we have a saved answer for this question
        if (savedAnswer) {
            // For text input questions
            if (text_field) {
                text_field.value = savedAnswer;
                console.log('suc')
            }
            // For multiple choice questions
            else if (radios.length > 0) {
                for (let radio of radios) {
                    const answerText = radio.parentElement.innerText.trim();
                    if (answerText.includes(savedAnswer)) {
                        radio.checked = true;
                        break;
                    }
                }
            }
            handleNextButton()

        }
    }
}
// listen for keydown events (up, down, enter, backspace)
document.addEventListener( "keydown", function( e ) {
    var keyCode = e.keyCode || e.which;
    // check whether its a multiple choice question before checking for up and down arrows for movement
    if (answers) {
        found_radio = false
        // DOWN ARROW - SELLECT PREVIOUS OPTION
        if (keyCode === 40) {
            for (let i = 0; i < answers.children.length; i++) {
                if (radios[i].checked) {
                    // select next option or the first option, if there is no next option
                    let next = (i + 1) < radios.length ? i + 1 : 0;
                    radios[next].checked = true
                    found_radio = true
                    break
                }
            }
            // select first option if there are no selected
            if (!found_radio) {
                radios[0].checked = true
            }

        // UP ARROW - SELECT NEXT OPTION
        } else if (keyCode === 38) {
            for (let i = 0; i < answers.children.length; i++) {
                if (radios[i].checked) {
                    // select prev option or the last option if there are no prev options
                    let prev = (i - 1) >= 0 ? i - 1 : radios.length-1;
                    radios[prev].checked = true
                    found_radio = true
                    break
                }
            }
            // select last option if there are no selected
            if (!found_radio) {
                radios[radios.length-1].checked = true
            }
        }
    }

    // SHIFT + ENTER - GO BACK
    if (e.shiftKey && keyCode === 13) {
        window.history.back();
    }
    // ENTER - NEXT QUESTION BUTTON
    else if (keyCode === 13) {
        handleNextButton();
    }

}, false);

function saveQuizAnswers() {
    // Only run if we're on the correct page
    if (!window.location.href.startsWith('https://moodle.yerlan.top/mod/quiz/review.php')) {
        return;
    }

    const answers = {};

    const form = document.getElementById('region-main')
        .children[3]
        .children[1]
        .children[0]
        .children;
    if (form.length <=3) {
        return
    }

    for (let question of form) {
        let questionElements;
        try {
            questionElements = question.children[1].children;
        } catch (error) {
            continue;
        }

        let questionText = questionElements[0].children[2].innerText;
        if (questionText.includes('Answer Question')){
            questionText = questionText.split(' ').filter((_, i) => i !== 2).join(' ')
        }
        const questionAnswer = questionElements[1].innerText.split(': ')[1];
        answers[questionText] = questionAnswer;
    }

    localStorage.setItem('lastReviewAnswers', JSON.stringify(answers));
    alert('SAVED ANSWERS');
    console.log(answers)
}

function handleNextButton() {
    const next_btn = document.getElementById('mod_quiz-next-nav')
    if (!next_btn) {
        console.log('Next button not found!')
        let submit_btn = document.getElementsByClassName('btn btn-primary')[0]
        let save_btn = document.querySelector('.btn.btn-primary[data-action=save]')
        if (!save_btn) {
            submit_btn.click()
        } else {
            save_btn.click()
        }
    } else {
        next_btn.click()
    }
}

saveQuizAnswers()
